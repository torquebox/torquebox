<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="jboss">
  <title>JBoss AS Crash Course</title>

  <para>The JBoss Application Server (AS7) is the foundation upon which
  TorqueBox is built. You can go a long way with TorqueBox without knowing
  anything about the administration of JBoss AS, but for advanced
  applications, it's worth knowing something about how AS is configured and
  extended. Feel free to skip this section if you're just getting started with
  TorqueBox, and use it as a reference later.</para>

  <section id="configuring-jboss">
    <title>Configuring</title>

    <para>JBoss folder structure now has expressive changes since previous
    releases, the most visible comes to folder structure and runtime modes:
    <emphasis role="bold">domain</emphasis> and <emphasis
    role="bold">standalone.</emphasis> In this release of Torquebox, just
    standalone mode is supported, domain mode support will come to the next
    releases.</para>

    <para>Now in JBoss, all server configuration is concentrated in two
    runtime modes: <emphasis>standalone</emphasis> and
    <emphasis>domain</emphasis>. Administrative tasks come to be easier to
    maintain, eliminating complexity of multiple configuration folders and
    descriptors.</para>

    <para><mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/jboss-server.png"
                     format="PNG" />
        </imageobject>
      </mediaobject></para>

    <para>TorqueBox uses default mode from standalone runtime. A stock JBoss
    distribution will come with others, as you see above, custom profiles will
    come up in the next releases.</para>

    <para>JBoss AS 7 comes with a modular architecture, libraries common to
    all server configurations are kept under the <filename>modules/</filename>
    directory and configuration files are stored inside
    <literal>standalone/configuration</literal>/ folder through <emphasis
    role="bold">standalone.xml</emphasis>.</para>

    <para>The standalone mode has a common structure, and usually include the
    following directories: <literal>configuration/</literal>,
    <literal>deployments/</literal> and <literal>lib/</literal>. In general,
    it isn't a good idea to remove anything from these directories that you
    didn't put there yourself.</para>

    <para><mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/jboss-standalone-mode.png"
                     format="PNG" />
        </imageobject>
      </mediaobject></para>

    <para>In addition, some directories are created automatically at runtime,
    as needed: <filename>tmp/</filename>, <filename>data/</filename>, and
    <filename>log/</filename>. Though not typically necessary, you may safely
    delete these when the server is not running to clear its persistent
    state.</para>
  </section>

  <section id="running-jboss">
    <title>Running</title>

    <para>The <filename>$JBOSS_HOME/bin/</filename> directory contains the
    main JBoss entry point, <filename>standalone.sh</filename> (or
    <filename>standalone.bat</filename>), along with its config file,
    <filename>standalone.conf</filename>. Running the JBoss server is simple:
    <screen> <prompt>$</prompt> <command>$JBOSS_HOME/bin/standalone.sh</command> </screen>Use
    the <option>--server-config</option> option to specify a different
    configuration. For example, to put JBoss in "clustered" mode: <screen> <prompt>$</prompt> <command>$JBOSS_HOME/bin/standalone.sh --server-config=torquebox/standalone-preview-ha.xml</command> </screen></para>

    <para>In the latest releases of TorqueBox some commands of JBoss were
    encapsulated to turn life easier. Now is possible to do the same
    with:</para>

    <para><screen> <prompt>$</prompt> <command>torquebox run --clustered</command> </screen>Multiple
    instances of TorqueBox can run in the same machine completely
    independently, to bind each one with some specific IP address:</para>

    <para><screen> <prompt>$</prompt> <command>torquebox run -b 0.0.0.0</command> </screen></para>

    <para>You may set Java system properties using the <option>-D</option>
    option. Pass <option>-h</option> for a list of all the available
    options.</para>

    <para><emphasis role="bold">Note</emphasis>: TorqueBox setup will be the
    topic of the next chapters. Binding option with STOMP is currently
    experimental.</para>

    <para>Permanent runtime configuration of JBoss should go in
    <filename>bin/standalone.conf</filename>. For example, your application
    may require more memory (RAM) than the default allocated. Edit
    <filename>standalone.conf</filename> to increase the value of
    <option>-Xmx</option> to something reasonable.</para>

    <para>Though <xref linkend="capistrano-support" /> doesn't strictly
    require it, in production you may prefer to control JBoss via a Unix "init
    script", examples of which may be found in <filename>bin/</filename>. Feel
    free to tweak one for your particular OS.</para>
  </section>

  <section id="deploying-to-jboss">
    <title>Deploying</title>

    <para>Each runtime mode has a <literal>deployments/</literal>
    subdirectory, the contents of which determine the applications and
    services JBoss runs. These apps and services are represented as archives,
    "exploded" folders, or text files called "deployment descriptors". JBoss
    deployment scanner comes with meaningful changes, operating in two
    different modes: <emphasis role="bold">auto-deploy</emphasis> and
    <emphasis role="bold">manual deploy</emphasis>.</para>

    <para>Auto-deploy mode works like in previous releases of AS, at every
    time that timestamp changes, content will be deployed. The scanner take
    responsability to place a marker file suffix with
    "<literal>.deployed</literal>" status, in case of content deletion, the
    scanner will not trigger undeployment process automatically.</para>

    <para>In manual deploy mode the scanner will rely on addition or removal
    of a marker file suffix. To understand a little further about deployment
    method, take a look at marker files section from <ulink
    url="https://docs.jboss.org/author/display/AS7/Admin+Guide#AdminGuide-DeploymentCommands">administrator
    guide.</ulink></para>

    <para><mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/jboss-deploy.png"
                     format="PNG" scale="100" />
        </imageobject>
      </mediaobject></para>

    <para>With introduction of <emphasis role="bold">knob</emphasis> file
    concept TorqueBox became more technology-agnostic, it's possible now to
    deploy any combination of components: web, messaging, jobs and services.
    Application files doesn't have as requirement anymore to stay in a
    specific directory, JBoss scanner will do all the job looking at knob
    files reference inside <literal>/standalone/deployments</literal>
    folder.</para>

    <para>TorqueBox provides Rake tasks to create and copy a deployment
    descriptor for your Ruby application to
    <filename>$TORQUEBOX_HOME/standalone/deployments/</filename>. For more
    details, see <xref linkend="deployment" /> and <xref
    linkend="deployment-descriptors" />.</para>
  </section>

  <section id="jboss-logging">
    <title>Logging</title>

    <para>Each runtime mode has a <filename>log/</filename> subdirectory
    (created at runtime, if necessary) that contains the log messages
    generated by JBoss as determined by its configuration.</para>

    <para>JBoss provides a very sophisticated logging system that nobody
    completely understands. Logging configuration rules are contained in
    <filename>standalone/configuration/logging.properties</filename>, in which
    may be found example configs for categorized log message routing, complex
    file rotation, syslog integration, SMTP notifications, SNMP traps, JMS,
    JMX and more! It is <emphasis>WAY</emphasis> beyond the scope of this
    document to explain those rules, but by default you will see INFO messages
    on the console (the shell where you start JBoss) and persistently written
    to <filename>log/server.log</filename>.</para>

    <para>Any messages written to <constant>stdout</constant> or
    <constant>stderr</constant> will also be displayed on the console and
    written to <filename>log/server.log</filename>.</para>

    <section id="torquebox-logger">
      <title>The <classname>TorqueBox::Logger</classname></title>

      <para>Ruby Loggers work normally inside of TorqueBox, of course, and
      you'll find your Rails log files exactly where you expect them to be.
      But some users, especially those already familiar with JBoss logging,
      may prefer for their Ruby log messages to be passed to JBoss. This is
      easily achieved using the <classname>TorqueBox::Logger</classname>,
      constructed with an optional "category". For example, you may configure
      your Rails app like so: <screen> <code>config.logger = TorqueBox::Logger.new</code> </screen>
      This results in all Rails-generated log messages passed to JBoss, hence
      written to <filename>log/server.log</filename> in the default
      configuration. The category for these messages will be the application's
      name. You can override this by passing the category name in the
      constructor: <screen> <code>TorqueBox::Logger.new( "Billing" )</code> </screen>
      You can also pass a class in the constructor, as is common in Java
      applications: <screen> <code>@logger = TorqueBox::Logger.new( self.class )</code> </screen>
      This allows you to be more strategic with your logging, sending some
      messages to the normal Rails logs and others to JBoss for more
      "enterprisey" processing.</para>
    </section>
  </section>
</chapter>
