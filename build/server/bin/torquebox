#!/usr/bin/env ruby

# Copyright 2008-2011 Red Hat, Inc, and individual contributors.
# 
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.

require 'thor'
require 'torquebox-rake-support'
require 'torquebox/server'

class TorqueBoxCommand < Thor

  TASK_ORDER = %w(deploy undeploy start cli env help)

  map "run" => "start"
  desc "run", "Run TorqueBox"
  method_option :clustered, :type => :boolean, :desc => "Run TorqueBox in clustered mode"
  def start
    setup_environment
    options.clustered ? TorqueBox::DeployUtils.run_server(:clustered) : TorqueBox::DeployUtils.run_server
  end

  desc "deploy ROOT", "Deploy an application to TorqueBox"
  long_desc <<-EOS
    Deploy an application to TorqueBox. The ROOT argument should point to either
    a directory containing the application you want to deploy, a -knob.yml file,
    a .knob archive, or any Java deployable artifact (.war, .ear, etc).
  EOS
  method_option :context_path, :type => :string, :desc => "Context Path (ex: /, /my_app)"
  method_option :env, :type => :string, :desc => "Application Environment (ex: development, test, production)"
  def deploy(root)
    setup_environment
    root = File.expand_path(root)
    opts = {:root => root}.merge(options)
    descriptor = TorqueBox::DeployUtils.basic_deployment_descriptor(opts)
    deployment_name = TorqueBox::DeployUtils.deployment_name(root)
    deployed_name, deploy_dir = TorqueBox::DeployUtils.deploy_yaml(descriptor, deployment_name)
    puts "Deployed: #{deployed_name}"
    puts "    into: #{deploy_dir}"
  end

  desc "undeploy ROOT", "Undeploy an application from TorqueBox"
  def undeploy(root)
    setup_environment
    root = File.expand_path(root)
    deployment_name = TorqueBox::DeployUtils.deployment_name(root)
    deploy_name, deploy_dir = TorqueBox::DeployUtils.undeploy(deployment_name)

    if deploy_name
      puts "Undeployed: #{deploy_name}"
      puts "      from: #{deploy_dir}"
    else
      puts "Nothing to undeploy"
    end
  end

  desc "cli", "Run the JBoss AS7 CLI"
  def cli
    setup_environment
    options = "--connect"
    if Config::CONFIG['host_os'] =~ /mswin/
      path = File.join(TorqueBox::Server.jboss_home, "bin\\jboss-admin")
      exec(path, options)
    else
      path = "/bin/sh #{File.join(TorqueBox::Server.jboss_home, 'bin/jboss-admin.sh')}"
      exec "#{path} #{options}"
    end
  end

  desc "env [VARIABLE]", "Display TorqueBox environment variables"
  def env(variable=nil)
    setup_environment
    env_keys = %w(TORQUEBOX_HOME JBOSS_HOME JRUBY_HOME)
    if variable.nil?
      env_keys.each { |key| shell.say "#{key}=#{ENV[key]}" }
    else
      key = env_keys.find { |key| variable.downcase == key.downcase }
      shell.say(ENV[key]) unless key.nil?
    end
  end

  no_tasks {
    def setup_environment
      ENV['TORQUEBOX_HOME'] = TorqueBox::Server.torquebox_home
      ENV['JBOSS_HOME'] = TorqueBox::Server.jboss_home
      ENV['JRUBY_HOME'] = TorqueBox::Server.jruby_home
      ENV['JBOSS_OPTS'] = "-Djruby.home=#{TorqueBox::Server.jruby_home}"
    end

    class << self
      # Override all_tasks and help methods in Thor to print options
      # out in the order we prefer
      alias_method :all_tasks_from_super, :all_tasks

      def all_tasks
        super_tasks = all_tasks_from_super
        tasks = Thor::CoreExt::OrderedHash.new
        TASK_ORDER.each do |task|
          tasks[task] = super_tasks[task] unless super_tasks[task].nil?
        end
        tasks.merge(super_tasks)
      end

      def help(shell, subcommand = false)
        list = printable_tasks(true, subcommand)
        Thor::Util.thor_classes_in(self).each do |klass|
          list += klass.printable_tasks(false)
        end

        shell.say "Tasks:"
        shell.print_table(list, :ident => 2, :truncate => true)
        shell.say
        class_options_help(shell)
      end
    end
  }

end

TorqueBoxCommand.start
